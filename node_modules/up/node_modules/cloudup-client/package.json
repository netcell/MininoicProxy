{
  "name": "cloudup-client",
  "description": "cloudup api client",
  "version": "0.2.1",
  "keywords": [
    "cloudup",
    "api",
    "client",
    "files",
    "upload",
    "service"
  ],
  "dependencies": {
    "superagent": "0.15.7",
    "debug": "*",
    "batch": "0.5.0",
    "JSONStream": "0.7.1",
    "mime": "1.2.11",
    "only": "0.0.2",
    "throttleit": "0.0.2",
    "uid2": "0.0.3",
    "form-data": "~0.1.0",
    "cloudup-ua": "0.0.1",
    "png-size": "~0.1.0",
    "jpeg-size": "0.0.1",
    "head": "~1.0.0",
    "extend": "~1.2.1"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "better-assert": "*"
  },
  "main": "lib/client",
  "readme": "\n# Cloudup\n\n  Cloudup API client for nodejs.\n\n## Installation\n\n```\n$ npm install --save cloudup-client\n```\n\n## Links\n\n  - [examples](https://github.com/LearnBoost/cloudup-client/tree/master/examples)\n\n## Example\n\n```js\nvar Cloudup = require('cloudup-client');\n\nvar client = Cloudup({\n  url: 'http://localhost:3000',\n  user: 'ewald',\n  pass: 'Dev1'\n});\n\nclient\n.stream({ title: 'Cloudup API' })\n.file('Makefile')\n.file('package.json')\n.file('lib/client.js')\n.file('lib/collection.js')\n.file('lib/error.js')\n.file('lib/item.js')\n.save(function(){\n  console.log('upload complete');\n});\n```\n\n## API\n\n### Cloudup()\n\n  Initialize a new client with the given options:\n  \n   - `user` basic auth username\n   - `pass` basic auth password\n   - `token` auth token\n   - `useragent` user-agent name\n\n#### Cloudup.requestToken(appId:String, fn:Function)\n\n  Request an auth token with the `appId` provided by Cloudup\n  upon app registration. This prevents the need to store a user's\n  username and password.\n\n```js\nvar client = new Cloudup({\n  user: 'tobi',\n  pass: 'Dev1'\n});\n\nclient.requestToken('ah5Oa7F3hT8', function(err, tok){\n  if (err) throw err;\n\n  var client = new Cloudup({ token: tok });\n\n  client.streams(function(err, streams){\n    if (err) throw err;\n    console.log('streams:');\n    streams.forEach(function(stream){\n      console.log('  - %s', stream.title);\n    });\n  });\n});\n```\n\n### Cloudup.user(fn:Function)\n\n  Get authenticated user information:\n\n```js\nclient.user(function(err, user){\n  console.log(user);\n});\n```\n\n#### Cloudup.stream(options:Object|String)\n\n  Create a new stream.\n\n```js\nvar stream = client.stream({ title: 'Photos' });\n```\n\n  Or load an existing stream with its `.id`:\n\n```js\nvar stream = client.stream('cyswccQQZkw');\nstream.load(function(){\n  console.log(stream);\n});\n```\n\n#### Cloudup.streams(fn:Function)\n\n  Get an array of streams.\n\n#### Cloudup.streams(options, fn:Function)\n\n  Get an array of streams with the given `options`:\n\n  - `title` filter by title\n\n### Stream(id:String|options:Object)\n\n  Initialize a new Stream with the given options:\n  \n- `title` optional Stream title string\n  \n```js\n client\n .stream({ title: 'Animals' })\n .file('path/to/maru-1.jpg')\n .file('path/to/maru-2.jpg')\n .link('http://farm5.static.flickr.com/4131/5001570832_c1341f609f.jpg')\n .save(function(err){\n\n })\n```\n\n  Alternatively pass the stream's `id` and invoke `.load()`.\n\n#### Events:\n  \n- `item` (item) when an item is added\n- `save` Stream saved\n- `end` item uploads complete\n\n#### Stream.isNew()\n\n  Check if the stream is new.\n\n#### Stream.set(prop:String|Object, val:String|Function, [fn]:Function)\n\n  Set `prop`'s `val` with optional callback `fn`.\n\n#### Stream.item([options:Object|String)\n\n  Create a new item in this stream.\n  \n```js\nvar item = stream.item({ title: 'Maru the cat' })\n```\n\n  Or load an existing item with its `.id`:\n\n```js\nvar item = stream.item('iyswccQQZkw');\nitem.load(function(){\n  console.log(item);\n});\n```\n\n#### Stream.file(file:String, [options:Object])\n\n  Upload `file` as an item.\n  \n```js\nclient\n.stream({ title: 'Images' })\n.file('maru 1.png', { filename: 'Maru.png', })\n.file('maru 2.png', { title: 'Awesome Maru' })\n.file('maru 3.png')\n```\n\n#### Stream.link(url:String, [options:Object])\n\n  Upload `url` as an item.\n  \n```js\nclient\n.stream({ title: 'Bookmarks' })\n.link('http://ign.com', { title: 'IGN' })\n.link('http://cuteoverload.com')\n.link('http://uglyoverload.com')\n```\n\n#### Stream.toJSON()\n\n  Return JSON representation.\n\n#### Stream.concurrency(n:Number)\n\n  Upload concurrency.\n\n#### Stream.remove([fn]:Function)\n\n  Remove and invoke `fn(err)`.\n\n#### Stream.load(fn:Function)\n\n  Load the stream and invoke `fn(err, stream)`.\n\n#### Stream.save([fn]:Function)\n\n  Save and invoke `fn(err)`\n  \n  Emits \"error\" events with `(err, item)` if an item\n  fails to properly save. The callback of this method\n  is _only_ invoked with an error related to creating\n  the stream itself.\n\n### Item(id:String|options:Object)\n\n  Initialize a new Item with the given options:\n  \n - `title` optional Item title string\n - `filename` optional filename for `.file()`\n\n  Alternatively pass the item's `id` and invoke `.load()`.\n\n#### Item.isNew()\n\n  Check if the stream is new.\n\n#### Item.toJSON()\n\n  Return JSON representation.\n\n#### Item.file(file:String)\n\n  Queue `file` for uploading.\n  \n```js\n var stream = client.stream({ title: 'Animals' })\n var item = stream.item({ title: 'Simon' })\n item.file('path/to/simon.jpg')\n```\n\n#### Item.link(url:String)\n\n  Queue `url` for uploading.\n  \n```js\n var stream = client.stream({ title: 'Bookmarks' })\n var item = stream.item({ title: 'Ign' })\n item.file('http://ign.com')\n```\n\n#### Item.remove([fn]:Function)\n\n  Remove and invoke `fn(err)`.\n\n#### Item.set(prop:String|Object, val:String|Function, [fn]:Function)\n\n  Set `prop`'s `val` with optional callback `fn`.\n\n#### Item.thumb(path:String, fn:Function)\n\n  Queue thumbnail `path` for the next `.save()`, or \n  upload immediately and invoke `fn(err)`. When a callback `fn`\n  is given the item __MUST__ have already been saved.\n\n#### Item.save(fn:Function)\n\n  Create the remote item\n  and upload the associated\n  content, invoking `fn(err)`.\n\n#### Item.thumbSize(size)\n\n  Select a thumb by the given size string:\n\n```js\nvar thumb = item.thumbSize('1200x1200');\nconsole.log(thumb.url);\n```\n\n### User\n\n  Initialize a user.\n\n#### User.avatarSize(size)\n\n  Select an avatar by the given size string:\n\n```js\nclient.user(function(err, user){\n  var img = user.avatarSize('300x300').url;\n});\n```\n",
  "readmeFilename": "Readme.md",
  "_id": "cloudup-client@0.2.1",
  "dist": {
    "shasum": "1066ef1570bd676b685616047846e2ee1883434d"
  },
  "_from": "cloudup-client@0.2.1",
  "_resolved": "https://registry.npmjs.org/cloudup-client/-/cloudup-client-0.2.1.tgz"
}
